import Head from 'next/head';
import React from 'react';
import { WithLayoutPage } from '@/interfaces/index';
import type { NextApiRequest, NextApiResponse } from 'next';

import { getUser } from '@/graphql/utils/index';
import { useRouter } from 'next/router';
import SnackBar from '@/components/SnackBar';
import RoomForm from '@/components/dashboard/forms/Room/index';
import Backdrop from '@/components/Backdrop';
import AdminMenu from '@/components/layouts/AdminMenu';
import { client } from '@/lib/apollo';
import { useMutation } from '@apollo/client';
import { RoomBuildierVariables } from '@/interfaces/index';
import uploadToCloudinary from '@/utils/uploadToCloudinary';
import {
  GET_ALL_SERVICES,
  GET_ALL_ROOM_CATEGORIES,
  CREATE_ROOM_MODEL,
  GET_ALL_AMENITIES,
  GET_ALL_BEDS,
} from '@/queries/index';
type Option = {
  id: number;
  name: string;
};
type PageProps = {
  amenitiesList: Option[];
  servicesList: Option[];
  roomCategoriesList: Option[];
  bedTypesList: Option[];
  userId: number;
};
const RoomUploadPage: WithLayoutPage<PageProps> = ({
  amenitiesList,
  servicesList,
  roomCategoriesList,
  bedTypesList,
  userId,
}) => {
  const router = useRouter();
  const { hotelId } = router.query;
  const [isLoading, setIsLoading] = React.useState(false);
  const [createRoomUploadPageModel, { error }] = useMutation(
    CREATE_ROOM_MODEL,
    {
      onCompleted: () => {
        setIsLoading(false);
        setSuccess(true);
        setTimeout(() => {
          setSuccess(false);
        }, 5000);
      },
      onError: (graphError) => {
        setIsLoading(false);

        setErrorMessage(graphError.message);
      },
    }
  );
  const [success, setSuccess] = React.useState<Boolean>(false);
  const [errorMessage, setErrorMessage] = React.useState<string>('');
  const onSubmit = async (variables: RoomBuildierVariables) => {
    setIsLoading(true);
    try {
      const [mainImageData] = await uploadToCloudinary([variables.mainImage]);
      await createRoomUploadPageModel({
        variables: {
          ...variables,
          hotelId: hotelId,
          userId: userId,
          mainImage: mainImageData.secure_url,
        },
      });
    } catch (err: any) {
      console.log(err);
      setIsLoading(false);
      setErrorMessage(JSON.stringify(err));
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {error && (
          <SnackBar
            severity="error"
            message={errorMessage || "Request couldn't be complited"}
          />
        )}
        {success && (
          <SnackBar
            severity="success"
            message="hotel was created successfully"
          />
        )}
        <RoomForm
          services={servicesList}
          amenities={amenitiesList}
          roomCategories={roomCategoriesList}
          bedTypes={bedTypesList}
          submitHandler={onSubmit}
        />
        <Backdrop loading={isLoading} />
      </main>
    </div>
  );
};
export default RoomUploadPage;
RoomUploadPage.getLayout = function getLayout(page: React.ReactNode) {
  return <AdminMenu activeLink="dashboard">{page}</AdminMenu>;
};
export const getServerSideProps = async ({
  req,
  res,
}: {
  req: NextApiRequest;
  res: NextApiResponse;
}) => {
  try {
    const user = await getUser(req, res);
    if (user.role === 'ADMIN') {
      const servicesRequest = await client.query({
        query: GET_ALL_SERVICES,
      });
      const amenitiesRequest = await client.query({
        query: GET_ALL_AMENITIES,
      });
      const categoriesRequest = await client.query({
        query: GET_ALL_ROOM_CATEGORIES,
      });
      const bedsRequest = await client.query({
        query: GET_ALL_BEDS,
      });

      await Promise.all([
        servicesRequest,
        categoriesRequest,
        amenitiesRequest,
        bedsRequest,
      ]);

      const props = {
        ...amenitiesRequest.data,
        ...servicesRequest.data,
        ...categoriesRequest.data,
        ...bedsRequest.data,
        userId: user.id,
      };

      return {
        props: {
          ...props,
        },
      };
    }
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  } catch (error) {
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  }
};
