import Head from 'next/head';
import React from 'react';
import type { NextApiRequest, NextApiResponse } from 'next';
import { useRouter } from 'next/router';
import { WithLayoutPage } from '@/interfaces/index';
import type { Modify } from '@/interfaces/index';
import AdminMenu from '@/components/layouts/AdminMenu';

import HotelForm from '@/components/dashboard/forms/Hotel/index';
import Backdrop from '@/components/Backdrop';
import { useAuth } from '@/context/useAuth';
import SnackBar from '@/components/SnackBar';
import { client } from '@/lib/apollo';
import { useMutation, useQuery } from '@apollo/client';
import uploadToCloudinary from '@/utils/uploadToCloudinary';
import {
  GET_ALL_SERVICES,
  GET_ALL_FACILITIES,
  GET_ALL_ACTIVITIES,
  GET_ALL_LANGUAGES,
  GET_ALL_HOTEL_CATEGORIES,
  CREATE_HOTEL,
} from '@/queries/index';
import type { Hotel } from '@/interfaces/index';

type Option = {
  id: number;
  name: string;
};
type PageProps = {
  facilitiesList: Option[];
  activitiesList: Option[];
  servicesList: Option[];
  languagesList: Option[];
  hotelCategoriesList: Option[];
};
const HotelUploadPage: WithLayoutPage<PageProps> = ({
  facilitiesList,
  activitiesList,
  servicesList,
  languagesList,
  hotelCategoriesList,
}) => {
  const authContext = useAuth();

  const router = useRouter();
  if (authContext.loading) return <Backdrop loading={true} />;

  if (!authContext.session.user) return router.push('/signin');
  const [isLoading, setIsLoading] = React.useState(false);
  const [createHotel, { error, loading, data }] = useMutation(CREATE_HOTEL, {
    onCompleted: () => {
      setIsLoading(false);
      setSuccess(true);
      setTimeout(() => {
        setSuccess(false);
      }, 5000);
    },
    onError: (graphError) => {
      setIsLoading(false);
      setErrorMessage(graphError.message);
    },
  });

  type HotelVariables = Modify<
    Hotel,
    {
      frameImage: File;
      interiorImage: File;
    }
  >;

  const [success, setSuccess] = React.useState<Boolean>(false);
  const [errorMessage, setErrorMessage] = React.useState<string>('');
  const onSubmit = async (hotelVariables: HotelVariables) => {
    if (!authContext.session.user) return router.push('/signin');
    const toUploadImages = [
      hotelVariables.interiorImage,
      hotelVariables.frameImage,
    ];

    setIsLoading(true);

    try {
      const images = await uploadToCloudinary(toUploadImages);
      if (!images.length) {
        setIsLoading(false);
        return setErrorMessage('There was an error on the images upload.');
      }

      await createHotel({
        variables: {
          ...hotelVariables,
          interiorImage: images[0].secure_url,
          frameImage: images[1].secure_url,
          userId: authContext.session?.user.id,
        },
      });
    } catch (err: any) {
      setIsLoading(false);
      setErrorMessage(JSON.stringify(err));
      console.log(err);
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {error && (
          <SnackBar
            severity="error"
            message={errorMessage || "Request couldn't be complited"}
          />
        )}
        {success && (
          <SnackBar
            severity="success"
            message="hotel was created successfully"
          />
        )}

        <HotelForm
          facilities={facilitiesList}
          activities={activitiesList}
          services={servicesList}
          languages={languagesList}
          hotelCategories={hotelCategoriesList}
          submitHandler={onSubmit}
        />
      </main>
      <Backdrop loading={isLoading} />
    </div>
  );
};
HotelUploadPage.getLayout = function getLayout(page: React.ReactNode) {
  return <AdminMenu activeLink="dashboard">{page}</AdminMenu>;
};
export default HotelUploadPage;

export const getStaticProps = async ({
  req,
  res,
}: {
  req: NextApiRequest;
  res: NextApiResponse;
}): Promise<{
  props: PageProps | {};
  redirect?: {
    permanent: Boolean;
    destination: string;
  };
}> => {
  try {
    const activitiesRequest = await client.query({
      query: GET_ALL_ACTIVITIES,
    });
    const servicesRequest = await client.query({
      query: GET_ALL_SERVICES,
    });
    const facilitiesRequest = await client.query({
      query: GET_ALL_FACILITIES,
    });
    const categoriesRequest = await client.query({
      query: GET_ALL_HOTEL_CATEGORIES,
    });
    const languagesRequest = await client.query({
      query: GET_ALL_LANGUAGES,
    });

    await Promise.all([
      activitiesRequest,
      servicesRequest,
      facilitiesRequest,
      categoriesRequest,
      languagesRequest,
    ]);

    const props = {
      ...facilitiesRequest.data,
      ...activitiesRequest.data,
      ...languagesRequest.data,
      ...servicesRequest.data,
      ...categoriesRequest.data,
    };

    return {
      props: {
        ...props,
      },
    };
  } catch (error) {
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  }
};
