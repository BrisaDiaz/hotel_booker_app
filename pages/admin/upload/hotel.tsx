import Head from 'next/head';
import React from 'react';
import type { NextApiRequest, NextApiResponse } from 'next';
import { WithLayoutPage } from '@/interfaces/index';
import { GetServerSideProps } from 'next';

import AdminMenu from '@/components/layouts/AdminMenu';
import { getUser } from '@/graphql/utils/index';
import HotelForm from '@/components/HotelForm';
import Backdrop from '@/components/Backdrop';

import SnackBar from '@/components/SnackBar';
import { client } from '@/lib/apollo';
import { useMutation } from '@apollo/client';
import {
  GET_ALL_SERVICES,
  GET_ALL_FACILITIES,
  GET_ALL_ACTIVITIES,
  GET_ALL_LANGUAGES,
  GET_ALL_HOTEL_CATEGORIES,
  CREATE_HOTEL,
} from '@/queries/index';
import type { Hotel } from '@/interfaces/index';

type Option = {
  id: number;
  name: string;
};

const HotelUploadPage: WithLayoutPage = ({
  facilitiesList,
  activitiesList,
  servicesList,
  languagesList,
  hotelCategoriesList,
  userId,
}: {
  facilitiesList: Option[];
  activitiesList: Option[];
  servicesList: Option[];
  languagesList: Option[];
  hotelCategoriesList: Option[];
  userId: number;
}): JSX.Element => {
  const [createHotel, { error, loading, data }] = useMutation(CREATE_HOTEL, {
    onCompleted: () => {
      setSuccess(true);
      setTimeout(() => {
        setSuccess(false);
      }, 5000);
    },
    onError: (graphError) => {
      setErrorMessage(graphError.message);
    },
  });

  const [success, setSuccess] = React.useState<Boolean>(false);
  const [errorMessage, setErrorMessage] = React.useState<string>('');
  const onSubmit = async (hotelVariables: Hotel) => {
    try {
      await createHotel({
        variables: { ...hotelVariables, userId: userId },
      });
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {error && (
          <SnackBar
            severity="error"
            message={errorMessage || "Request couldn't be complited"}
          />
        )}
        {success && (
          <SnackBar
            severity="success"
            message="hotel was created successfully"
          />
        )}

        <HotelForm
          facilities={facilitiesList}
          activities={activitiesList}
          services={servicesList}
          languages={languagesList}
          hotelCategories={hotelCategoriesList}
          submitHandler={onSubmit}
        />
      </main>
      <Backdrop loading={loading} />
    </div>
  );
};
HotelUploadPage.getLayout = function getLayout(page: React.ReactNode) {
  return <AdminMenu activeLink="dashboard">{page}</AdminMenu>;
};
export default HotelUploadPage;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  res,
}: {
  req: NextApiRequest;
  res: NextApiResponse;
}) => {
  try {
    const user = await getUser(req, res);
    if (user.role === 'ADMIN') {
      const activitiesRequest = await client.query({
        query: GET_ALL_ACTIVITIES,
      });
      const servicesRequest = await client.query({
        query: GET_ALL_SERVICES,
      });
      const facilitiesRequest = await client.query({
        query: GET_ALL_FACILITIES,
      });
      const categoriesRequest = await client.query({
        query: GET_ALL_HOTEL_CATEGORIES,
      });
      const languagesRequest = await client.query({
        query: GET_ALL_LANGUAGES,
      });

      const response = await Promise.all([
        activitiesRequest,
        servicesRequest,
        facilitiesRequest,
        categoriesRequest,
        languagesRequest,
      ]);

      const props = {
        ...facilitiesRequest.data,
        ...activitiesRequest.data,
        ...languagesRequest.data,
        ...servicesRequest.data,
        ...categoriesRequest.data,
        userId: user.id,
      };

      return {
        props: {
          ...props,
        },
      };
    }
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  } catch (error) {
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  }
};
