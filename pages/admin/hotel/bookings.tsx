import Head from 'next/head';
import React from 'react';
import type { NextApiRequest, NextApiResponse } from 'next';
import { client } from '@/lib/apollo';
import { getUser } from '@/graphql/utils';
import {
  WithLayoutPage,
  BookingListed,
  BookingEvent,
} from '@/interfaces/index';
import Backdrop from '@/components/Backdrop';
import Box from '@mui/material/Box';
import AdminMenu from '@/components/layouts/AdminMenu';
import {
  GET_BOOKING_BY_ID,
  GET_HOTEL_BOOKINGS,
  GET_HOTEL_ROOM_MODELS_LIST,
} from '@/queries/index';
import { useQuery, useLazyQuery } from '@apollo/client';
import { getFormattedBookings } from '@/utils/getFormattedBookings';
import BookingsCalendar from '@/components/dashboard/calendars/Bookings';
import BookingDetailsModal from '@/components/modals/BookingDetailsModal';
type PageProps = {
  hotelId: number;
  userId: number;
  bookings: BookingListed[];
  roomModels: { id: number; name: string }[];
};
const Bookings: WithLayoutPage<PageProps> = ({
  hotelId,
  userId,
  bookings,
  roomModels,
}) => {
  const [isModalOpen, setIsModalOpen] = React.useState(false);
  const closeModal = () => {
    setIsModalOpen(false);
  };
  const openModal = () => {
    setIsModalOpen(true);
  };
  const [getBookingById, bookingDataRequest] = useLazyQuery(GET_BOOKING_BY_ID);

  React.useEffect(() => {
    if (bookingDataRequest.data?.booking) {
      openModal();
    }
  }, [bookingDataRequest]);

  const handleBookingSelect = async (event: BookingEvent) => {
    // event.id = bookingId+roomId//
    const bookingId = parseInt(event.id.split('+')[0]);
    console.log(bookingId);
    try {
      await getBookingById({
        variables: {
          bookingId,
          userId,
        },
      });
    } catch (err) {
      console.log(err);
    }
  };
  return (
    <div>
      <Head>
        <title>Bookings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box sx={{ maxWidth: 1200, mt: 1 }} component="main">
        <BookingsCalendar
          data={getFormattedBookings(bookings, roomModels)}
          onSelect={handleBookingSelect}
        />

        {isModalOpen && bookingDataRequest.data && (
          <BookingDetailsModal
            bookingData={bookingDataRequest.data?.booking}
            isOpen={isModalOpen}
            closeModal={closeModal}
          />
        )}
      </Box>
      <Backdrop loading={bookingDataRequest.loading} />
    </div>
  );
};
Bookings.getLayout = function getLayout(page: React.ReactNode) {
  return <AdminMenu activeLink="bookings">{page}</AdminMenu>;
};

export default Bookings;
type PageContext = {
  req: NextApiRequest;
  res: NextApiResponse;
  query: {
    hotelId: number;
  };
};
export const getServerSideProps = async ({ req, res, query }: PageContext) => {
  try {
    const user = await getUser(req, res);

    if (user.role === 'ADMIN') {
      const bookingResponce = await client.query({
        query: GET_HOTEL_BOOKINGS,
        variables: {
          userId: user.id,
          hotelId: query.hotelId,
        },
      });
      const RoomModelsResponce = await client.query({
        query: GET_HOTEL_ROOM_MODELS_LIST,
        variables: {
          hotelId: query.hotelId,
        },
      });

      return {
        props: {
          hotelId: query.hotelId,
          userId: user.id,

          bookings: bookingResponce.data.bookings,
          roomModels: RoomModelsResponce.data.hotel.roomModels,
        },
      };
    }

    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  } catch (e: any) {
    console.log(e.networkError ? e.networkError?.result?.errors : e);
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  }
};
