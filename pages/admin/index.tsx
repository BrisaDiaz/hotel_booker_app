import React from 'react';
import type { GetServerSideProps, NextApiRequest, NextApiResponse } from 'next';
import { getUser } from '@/graphql/utils';
import { client } from '@/lib/apollo';
import { GET_ADMIN_HOTELS, GET_HOTEL_BY_ID } from '@/queries/index';
import { useLazyQuery } from '@apollo/client';
import { Hotel } from '@/interfaces/index';
import SnackBar from '@/components/SnackBar';
import { useMutation, useQuery } from '@apollo/client';
import uploadToCloudinary from '@/utils/uploadToCloudinary';
import {
  GET_ALL_SERVICES,
  GET_ALL_FACILITIES,
  GET_ALL_ACTIVITIES,
  GET_ALL_LANGUAGES,
  GET_ALL_HOTEL_CATEGORIES,
  CREATE_HOTEL,
} from '@/queries/index';
import { WithLayoutPage } from '@/interfaces/index';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Backdrop from '@/components/Backdrop';
import DinamicForm from '@/components/dashboard/forms/Hotel/DinamicForm';
import AdminMenu from '@/components/layouts/AdminMenu';
import Box from '@mui/material/Box';
import ActionCard from '@/components/dashboard/ActionCard';
import HotelCard from '@/components/dashboard/HotelCard';
import HotelModal from '@/components/modals/HotelModal';
type FieldToEdit =
  | 'about'
  | 'contact'
  | 'price'
  | 'aspect'
  | 'features'
  | 'policies'
  | 'address'
  | '';
const Dashboard: WithLayoutPage = ({
  hotels,
  hotelsCount,
}: {
  hotels: Array<{
    id: number;
    name: string;
    frameImage: string;
    lowestPrice: number;
    taxesAndCharges: number;
    address: {
      holeAddress: string;
    };
  }>;
  hotelsCount: number;
}) => {
  const router = useRouter();
  const cardData = {
    title: hotelsCount === 1 ? 'hotel' : 'hotels',
    count: hotelsCount,
    actions: [
      {
        name: 'add',
        callback: () => {
          router.push('/admin/upload/hotel');
        },
      },
    ],
  };

  const handleRedirect = (hotelId: number) => {
    router.push({
      pathname: '/admin/hotel',
      query: {
        hotelId: hotelId,
      },
    });
  };
  const [isHotelModalOpen, setIsHotelModalOpen] =
    React.useState<boolean>(false);

  const [isLoading, setLoading] = React.useState<boolean>(false);
  const [toEditHotelData, setToEditHotelData] = React.useState<Hotel | {}>({});
  const [toEditField, setToEditField] = React.useState<FieldToEdit>('');
  const formRef = React.useRef(null);
  const [getHotelToEdit, hotelDataRequest] = useLazyQuery(GET_HOTEL_BY_ID);

  const [getCategries, categoriesRequest] = useLazyQuery(
    GET_ALL_HOTEL_CATEGORIES
  );
  const [getServices, servicesRequest] = useLazyQuery(GET_ALL_SERVICES);
  const [getFacilities, facilitiesRequest] = useLazyQuery(GET_ALL_FACILITIES);
  const [getActivities, activitiesRequest] = useLazyQuery(GET_ALL_ACTIVITIES);
  const [getLanguages, languagesRequest] = useLazyQuery(GET_ALL_LANGUAGES);

  React.useEffect(() => {
    if (
      hotelDataRequest.loading ||
      categoriesRequest.loading ||
      servicesRequest.loading ||
      facilitiesRequest.loading ||
      activitiesRequest.loading ||
      languagesRequest.loading
    ) {
      return setLoading(true);
    }
    setLoading(false);
  }, [
    hotelDataRequest,
    categoriesRequest,
    servicesRequest,
    facilitiesRequest,
    activitiesRequest,
    languagesRequest,
  ]);
  const openHotelModal = (hotelId: number) => {
    getHotelToEdit({ variables: { hotelId: hotelId } });
  };
  React.useEffect(() => {
    if (hotelDataRequest.data?.hotelById) {
      setToEditHotelData(hotelDataRequest.data?.hotelById);
      setIsHotelModalOpen(true);
    }
  }, [hotelDataRequest.data]);

  const handleEditAbort = () => {
    setToEditField('');
  };
  const closeHotelModal = () => {
    setIsHotelModalOpen(false);
  };
  const handleSubmit = (data: any) => {
    console.log(data);
  };
  const handleEditSelected = async (fieldSelected: FieldToEdit) => {
    if (fieldSelected === 'features') {
      await Promise.all([
        getServices(),
        getFacilities(),
        getActivities(),
        getLanguages(),
      ]);
    }
    if (fieldSelected === 'about') {
      await getCategries();
    }
    setToEditField(fieldSelected);
    closeHotelModal();
    window.scrollTo({
      top: formRef.current.offsetTop,
      behavior: 'smooth',
    });
  };

  return (
    <div>
      <Head>
        <title>Hotel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        sx={{ p: { xs: '16px 0', sm: '16px 16px' }, maxWidth: 1200 }}
        component="main"
      >
        <Box sx={{ p: ' 20px 10px 10px', maxWidth: 'fit-content' }}>
          <ActionCard card={cardData} />
        </Box>
        <Box
          sx={{
            p: ' 20px 10px',
            display: 'flex',
            justifyContent: { xs: 'center', md: 'start' },
            flexWrap: 'wrap',
            gap: { xs: '20px', lg: '30px' },
          }}
        >
          {hotels.map((hotel) => (
            <HotelCard
              key={hotel.id}
              hotel={hotel}
              handleRedirect={handleRedirect}
              onEdit={openHotelModal}
            />
          ))}
        </Box>
        {!isLoading && toEditHotelData !== {} && isHotelModalOpen && (
          <HotelModal
            isModalOpend={isHotelModalOpen}
            closeModal={closeHotelModal}
            onEdit={handleEditSelected}
            hotel={toEditHotelData}
          />
        )}
      </Box>
      {!isLoading && toEditField && toEditHotelData !== {} && (
        <DinamicForm
          toEditField={toEditField}
          hotel={toEditHotelData}
          submitHandler={handleSubmit}
          abortHandler={handleEditAbort}
          facilities={facilitiesRequest?.data?.facilitiesList || []}
          activities={activitiesRequest.data?.activitiesList || []}
          languages={languagesRequest.data?.laguagesList || []}
          services={servicesRequest.data?.servicesList || []}
          hotelCategories={categoriesRequest?.data?.hotelCategoriesList || []}
        />
      )}{' '}
      <div ref={formRef} />
      <Backdrop loading={isLoading} />
    </div>
  );
};
Dashboard.getLayout = function getLayout(page: React.ReactNode) {
  return <AdminMenu activeLink="dashboard">{page}</AdminMenu>;
};
export default Dashboard;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  res,
}: {
  req: NextApiRequest;
  res: NextApiResponse;
}) => {
  try {
    const user = await getUser(req, res);

    const { data } = await client.query({
      query: GET_ADMIN_HOTELS,
      variables: { userId: user.id },
    });

    return {
      props: {
        hotels: data?.adminHotels.hotels,
        hotelsCount: data?.adminHotels.hotelsCount,
      },
    };
  } catch (e) {
    console.log(e);

    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
      props: {},
    };
  }
};
