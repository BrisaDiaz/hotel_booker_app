import * as React from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useMutation } from '@apollo/client';
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import { useForm } from 'react-hook-form';
import Link from '@mui/material/Link';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import validations from '@/utils/formValidations';
import { SIGN_IN } from '@/queries/index';
import { useAuth } from '../context/useAuth';
import Backdrop from '@/components/Backdrop';
import SnackBar from '@/components/SnackBar';
import { WithLayoutPage } from '@/interfaces/index';
import AppBar from '@/components/layouts/AppBar';
import useNotification from '@/hooks/useNotification';

function Copyright(props: any) {
  return (
    <Typography
      variant="body2"
      color="text.secondary"
      align="center"
      {...props}
    >
      {'Copyright Â© '}
      <Link color="inherit" href="https://mui.com/">
        Your Website
      </Link>{' '}
      {new Date().getFullYear()}
      {'.'}
    </Typography>
  );
}

const SignIn: WithLayoutPage = () => {
  const { setSession } = useAuth();

  const { notification, notify } = useNotification({ autoClean: true });
  const [signIn, { loading }] = useMutation(SIGN_IN, {
    onError: ({ message }) => {
      notify({
        type: 'error',
        content: message || "Signin couldn't be completed",
      });
    },
    onCompleted: (data) => {
      const { token, user } = data.signin;
      const { id, email, firstName, lastName, role } = user;
      setSession({ user: { id, email, firstName, lastName, role }, token });

      role === 'ADMIN' ? router.push('/admin') : router.push('/search');
    },
  });
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ mode: 'onBlur' });
  const router = useRouter();
  const redirectToSignup = () => {
    router.push('/signup');
  };
  const onSubmit = async (data: any, event: any) => {
    event.preventDefault();
    try {
      await signIn({
        variables: { ...data },
      });
    } catch (err) {}
  };

  return (
    <div>
      <Head>
        <title>Signin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Box
          sx={{
            maxWidth: '1200px',
            mx: 'auto',
            mt: 2,
          }}
        >
          {notification.content && (
            <SnackBar severity="error" message={notification.content} />
          )}

          <Container component="main" maxWidth="xs">
            <CssBaseline />
            <Box
              sx={{
                marginTop: 12,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
              }}
            >
              <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>
                <LockOutlinedIcon sx={{ color: '#fff' }} />
              </Avatar>
              <Typography component="h1" variant="h5">
                Sign In
              </Typography>
              <Box
                component="form"
                noValidate
                onSubmit={handleSubmit(onSubmit)}
                sx={{ mt: 3, input: { background: '#fff' } }}
              >
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <TextField
                      required
                      fullWidth
                      type="email"
                      id="email"
                      label={
                        errors['email']
                          ? errors['email'].message
                          : 'Email Address'
                      }
                      {...register('email', { ...validations.email })}
                      error={errors['email'] && true}
                      autoComplete="email"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      required
                      fullWidth
                      type="password"
                      {...register('password', { ...validations.password })}
                      error={errors['password'] && true}
                      label={
                        errors['password']
                          ? errors['password'].message
                          : 'Password'
                      }
                      id="password"
                      autoComplete="new-password"
                    />
                  </Grid>
                </Grid>
                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  sx={{ mt: 3, mb: 2, p: 2 }}
                >
                  Sign In
                </Button>
                <Grid container>
                  <Grid item xs>
                    <Link href="#" variant="body2">
                      Forgot password?
                    </Link>
                  </Grid>
                  <Grid item>
                    <Link
                      href="#"
                      variant="body2"
                      onClick={() => redirectToSignup()}
                    >
                      {"Don't have an account? Sign Up"}
                    </Link>
                  </Grid>
                </Grid>
              </Box>
            </Box>
            <Copyright sx={{ mt: 8, mb: 4 }} />
            <Backdrop loading={loading} />
          </Container>
        </Box>
      </main>
    </div>
  );
};
SignIn.getLayout = (page: React.ReactNode) => (
  <>
    <AppBar />
    <>{page}</>
  </>
);
export default SignIn;
