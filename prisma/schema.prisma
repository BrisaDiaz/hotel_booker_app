generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role     @default(USER)

}

model Administrator {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  hotels    Hotel[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  userId    Int
  hotelId   Int
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
}

model Hotel {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String
  brand            String
  administratorId  Int
  administrator    Administrator  @relation(fields: [administratorId], references: [id])
  hotelCategory    HotelCategory? @relation(fields: [category], references: [name])
  category         String
  telephone        String
  email            String
  website          String
  description      String?
  lowestPrice      Float
  taxesAndCharges  Float
  checkInHour      String
  checkOutHour     String
  policiesAndRules String
  frameImage       String
  interiorImage    String
  languages        Language[]
  facilities       Facility[]
  services         Service[]
  activities       Activity[]
  rooms            Room[]
  comments         Comment[]
  roomModels       RoomModel[]
  Features         Features?
  Address          Address?
}

model Facility {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  hotels    Hotel[]
}

model Address {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hotelId            Int      @unique
  hotel              Hotel    @relation(fields: [hotelId], references: [id])
  holeAddress        String
  country            String
  administrativeArea String
  postalCode         String
  city               String
  street             String


}

model Room {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  number      Int
  hotelId     Int
  bookings    Booking[]
  hotel       Hotel      @relation(fields: [hotelId], references: [id])
  roomModel   RoomModel? @relation(fields: [roomModelId], references: [id])
  roomModelId Int?
}

model RoomCategory {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  roomModels RoomModel[]
}

model RoomModel {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  hotel           Hotel        @relation(fields: [hotelId], references: [id])
  name            String
  hotelId         Int
  mts2            Int
  quantityInHotel Int          @default(0)
  roomCategory    RoomCategory @relation(fields: [category], references: [name])
  category        String
  lowestPrice     Float
  taxesAndCharges Float
  freeCancelation Boolean
  smooking        Boolean
  mainImage       String
  description     String?
  maximunStay     Int          @default(0)
  minimunStay     Int          @default(1)
  maximunGuests   Int
  amenities       Amenity[]
  services        Service[]
  rooms           Room[]


  public Boolean @default(true)


}

model Features {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  hotelId         Int      @unique
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  freeCancelation Boolean  @default(false)
  accessible      Boolean  @default(false)
  petFriendly     Boolean  @default(false)
  familyFriendly  Boolean  @default(false)
  ecoFriendly     Boolean  @default(false)
  smokerFriendly  Boolean  @default(false)


}

model Image {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  src         String
  hotelId     Int
  roomModelId Int?
}

model Amenity {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  roomModels RoomModel[]

}

model Service {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  roomModels RoomModel[]
  hotels     Hotel[]
}

model Client {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  firstName       String
  lastName        String
  email           String    @unique
  cellularNumber  String
  homePhoneNumber String
  bookings        Booking[]
}

model Booking {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  clientId        Int
  hotelId         Int
  roomModelId     Int
  administratorId Int
  children        Int
  adults          Int
  nights          Int
  checkInDate     DateTime
  checkOutDate    DateTime
  specifications  String
  paymentMethod   PaymentMethod @default(CASH)
  status          BookingStatus @default(ACTIVE)
  client          Client        @relation(fields: [clientId], references: [id])
  Room            Room?         @relation(fields: [roomId], references: [id])
  roomId          Int?
}

enum PaymentMethod {
  CREDIT_CARD
  BILL_TO_ACCOUNT
  CASH
  DEBIT_CARD
  TRAVELER_CHECK
}

enum BookingStatus {
  ACTIVE
  CANCELED
  DECLINED
  FINISH
  PENDING
}

model RoomBed {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bed         BedType? @relation(fields: [type], references: [name])
  type        String
  quantity    Int      @default(1)
  roomModelId Int
}

model Language {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  hotels Hotel[]
}

model Activity {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  hotels Hotel[]
}

model HotelCategory {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  hotels Hotel[]
}

model BedType {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  roomBed RoomBed[]
}

enum Role {
  USER
  ADMIN
}
