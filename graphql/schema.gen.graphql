### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Activity {
  hotelsCount: Int
  id: Int
  name: String
}

type Address {
  administrativeArea: String
  city: String
  country: String
  holeAddress: String
  hotelId: Int!
  id: Int!
  postalCode: String
  street: String
}

type AdminHotels {
  hotels: [Hotel]
  hotelsCount: Int
}

type Administrator {
  hotels: [Hotel]
  id: Int
  user: User
  userId: Int
}

type Album {
  createdAt: String
  hotelId: Int
  id: Int
  images: [Image]
  name: String
  roomModelId: Int
}

type Amenity {
  id: Int
  name: String
}

type AuthPayload {
  token: String
  user: User
}

type BedType {
  id: Int
  name: String
}

type Booking {
  adults: Int
  checkInDate: String
  checkOutDate: String
  children: Int
  client: Client
  clientId: Int
  createdAt: String
  guestsDistribution: [GuestsDistribution]
  hotel: Hotel
  hotelId: Int
  id: Int
  nights: Int
  paymentMethod: PaymentMethod
  reservedRooms: [Room]
  roomModel: RoomModel
  roomModelId: Int
  specifications: String
  status: BookingStatus
  totalCost: Float
}

type BookingRequest {
  adults: Int
  availableRooms: [Room]
  checkInDate: String
  checkOutDate: String
  children: Int
  client: Client
  clientId: Int
  createdAt: String
  email: String
  guestsDistribution: [GuestsDistribution]
  hotelId: Int
  id: Int
  nights: Int
  roomModel: RoomModel
  roomModelId: Int
  specifications: String
  status: BookingRequestStatus
  telephone: String
}

enum BookingRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

enum BookingStatus {
  ACTIVE
  CANCELED
  FINISHED
}

type CancellationDetails {
  bookingId: Int
  cancellationFee: Float
  createdAt: String
  id: Int
  message: String
}

type Client {
  bookings: [Booking]
  email: String
  firstName: String
  id: Int
  landlineNumber: String
  lastName: String
  mobileNumber: String
}

type Facility {
  hotelsCount: Int
  id: Int!
  name: String!
}

type Feature {
  hotelsCount: Int
  id: Int
  name: String
}

type Features {
  accessible: Boolean
  ecoFriendly: Boolean
  familyFriendly: Boolean
  freeCancellation: Boolean
  petFriendly: Boolean
  smokerFriendly: Boolean
}

type GuestSearch {
  guests: [Client]
  totalResults: Int
}

type GuestsDistribution {
  adults: Int
  children: Int
  id: Int
}

type GuestsSearchResult {
  guests: [Client]
}

type Hotel {
  activities: [Activity]
  address: Address
  administrator: Administrator
  administratorId: Int!
  albums: [Album]
  brand: String
  category: String
  checkInHour: String
  checkOutHour: String
  description: String
  email: String
  facilities: [Facility]
  features: Features
  frameImage: String
  id: Int!
  imagesCount: Int
  interiorImage: String
  languages: [Language]
  lowestPrice: Float
  miniatures: [Image]
  name: String
  policiesAndRules: String
  public: Boolean
  roomModels: [RoomModel]
  services: [Service]
  taxesAndCharges: Float
  telephone: String
  website: String
}

type HotelCategory {
  hotelsCount: Int
  id: Int
  name: String
}

type HotelData {
  bookingsCount: Int
  guestsCount: Int
  id: Int
  requestsCount: Int
  roomModelsCount: Int
}

type HotelSearch {
  hotels: [Hotel]
  pageCount: Int
  totalResults: Int
}

"""
hotel query search suggestion
"""
type HotelSuggestion {
  address: String
  id: Int
  name: String
}

type Image {
  albumId: Int
  id: Int
  src: String
}

type Language {
  hotelsCount: Int
  id: Int
  name: String
}

type Mutation {
  addRoomToModel(
    hotelId: Int!
    roomModelId: Int!
    roomNumbers: [Int!]!
    token: String!
  ): [Room]
  cancelBooking(
    bookingId: Int!
    cancellationFee: Float!
    message: String!
    token: String!
  ): CancellationDetails
  confirmBookingRequest(
    bookingRequestId: Int!
    paymentMethod: String
    roomsIds: [Int!]!
    token: String!
    totalCost: Float!
  ): Booking
  creatHotelRoomModel(
    amenities: [String]!
    beds: [bedsSpecifications]!
    cancellationFee: Float
    category: String!
    description: String!
    freeCancellation: Boolean!
    hotelId: Int!
    lowestPrice: Float!
    mainImage: String!
    maximumGuests: Int!
    maximumStay: Int
    minimumStay: Int!
    mts2: Int!
    name: String!
    services: [String]!
    smocking: Boolean!
    taxesAndCharges: Float!
    token: String!
  ): RoomModel
  createAlbum(
    hotelId: Int!
    images: [String]
    name: String!
    roomModelId: Int
    token: String!
  ): Album
  createHotel(
    accessible: Boolean!
    activities: [String!]!
    administrativeArea: String!
    brand: String
    category: String!
    checkInHour: String!
    checkOutHour: String!
    city: String
    country: String!
    description: String!
    ecoFriendly: Boolean!
    email: String
    facilities: [String!]!
    familyFriendly: Boolean!
    frameImage: String!
    freeCancellation: Boolean!
    holeAddress: String!
    interiorImage: String!
    languages: [String!]!
    lowestPrice: Float!
    name: String!
    petFriendly: Boolean!
    policiesAndRules: String!
    postalCode: String!
    services: [String!]!
    smokerFriendly: Boolean!
    street: String
    taxesAndCharges: Float!
    telephone: String!
    token: String!
    website: String
  ): Hotel
  declineBookingRequest(bookingRequestId: Int!, token: String!): BookingRequest
  deleteAlbum(albumId: Int!, token: String!): Album
  deleteRoomsOfModel(
    hotelId: Int!
    roomModelId: Int!
    roomsIds: [Int!]!
    token: String!
  ): [Room]
  makeBooking(
    checkInDate: String!
    checkOutDate: String!
    email: String!
    firstName: String!
    guestsDistribution: [roomSpecifications]
    landlineNumber: String!
    lastName: String!
    mobileNumber: String!
    paymentMethod: String
    roomModelId: Int!
    roomsIds: [Int!]!
    specifications: String
    token: String!
    totalCost: Float!
  ): Booking
  makeBookingRequest(
    checkInDate: String!
    checkOutDate: String!
    email: String!
    firstName: String!
    guestsDistribution: [roomSpecifications]!
    landlineNumber: String!
    lastName: String!
    mobileNumber: String!
    roomModelId: Int!
    specifications: String
  ): RoomConsultResponse
  signin(email: String!, password: String!): AuthPayload
  signup(
    email: String!
    firstName: String!
    lastName: String!
    password: String!
  ): User
  updateAlbum(
    albumId: Int!
    images: [String]
    name: String
    token: String!
  ): Album
  updateHotel(
    accessible: Boolean
    activities: [String]
    administrativeArea: String
    brand: String
    category: String
    checkInHour: String
    checkOutHour: String
    city: String
    country: String
    description: String
    ecoFriendly: Boolean
    email: String
    facilities: [String]
    familyFriendly: Boolean
    frameImage: String
    freeCancellation: Boolean
    holeAddress: String
    hotelId: Int!
    interiorImage: String
    languages: [String]
    lowestPrice: Float
    name: String
    petFriendly: Boolean
    policiesAndRules: String
    postalCode: String
    services: [String]
    smokerFriendly: Boolean
    street: String
    taxesAndCharges: Float
    telephone: String
    token: String!
    website: String
  ): Hotel
  updateRoomModel(
    amenities: [String]
    beds: [bedsSpecifications]
    cancellationFee: Float
    category: String
    description: String
    freeCancellation: Boolean
    hotelId: Int!
    lowestPrice: Float
    mainImage: String
    maximumGuests: Int
    maximumStay: Int
    minimumStay: Int
    mts2: Int
    name: String
    roomModelId: Int!
    services: [String]
    smocking: Boolean
    taxesAndCharges: Float
    token: String!
  ): RoomModel
  updateUserAccount(
    email: String
    firstName: String
    lastName: String
    password: String
    token: String!
  ): User
}

enum PaymentMethod {
  BILL_TO_ACCOUNT
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRAVELER_CHECK
}

type PlainResponse {
  message: String
  success: Boolean
}

type Query {
  activitiesList: [Activity]
  adminHotels(token: String!): AdminHotels
  albumImages(albumId: Int!): [Image]
  amenitiesList: [Amenity]
  authentication: AuthPayload
  bedTypesList: [BedType]
  bookingById(bookingId: Int!, token: String!): Booking
  checkRoomAvailability(
    checkInDate: String!
    checkOutDate: String!
    roomModelId: Int!
    rooms: [roomSpecifications]!
  ): RoomConsultResponse
  facilitiesList: [Facility]
  featuresList: [Feature]
  getBookingCancellationDetails(
    bookingId: Int!
    token: String!
  ): CancellationDetails
  getRoomModelAvailableRooms(
    checkInDate: String!
    checkOutDate: String!
    roomModelId: Int!
    rooms: [roomSpecifications!]!
  ): [Room]
  hotelAlbums(hotelId: Int!): [Album]
  hotelBookings(
    from: String
    hotelId: Int!
    status: String
    token: String!
    until: String
  ): [Booking]
  hotelById(hotelId: Int!): Hotel
  hotelCategoriesList: [HotelCategory]
  hotelData(hotelId: Int!, token: String!): HotelData
  hotelGuests(
    hotelId: Int!
    search: searchFilter
    skip: Int = 0
    sort: String
    take: Int = 6
    token: String!
  ): GuestSearch
  hotelImages(hotelId: Int!, skip: Int, take: Int): [Image]
  hotelRequests(
    hotelId: Int!
    search: searchFilter
    skip: Int = 0
    sort: String
    take: Int = 8
    token: String!
  ): RequestSearch
  hotelRoomModels(hotelId: Int!): [RoomModel]
  hotelSearch(
    activities: [String]
    categories: [String]
    facilities: [String]
    features: [String]
    languages: [String]
    search: String
    services: [String]
    skip: Int
    sort: String
    take: Int
  ): HotelSearch
  hotelSearchSuggestions(search: String!, take: Int = 4): [HotelSuggestion]
  languagesList: [Language]
  roomCategoriesList: [RoomCategory]
  roomModelAlbum(roomModelId: Int!): Album
  roomModelById(roomModelId: Int!): RoomModel
  roomModelImages(roomModelId: Int!, skip: Int, take: Int): [Image]
  servicesList: [Service]
  signout: PlainResponse
}

type RequestSearch {
  pageCount: Int
  requests: [BookingRequest]
  totalResults: Int
}

enum Role {
  ADMIN
  USER
}

type Room {
  bookings: [Booking]
  id: Int
  number: Int
  roomModel: RoomModel
  roomModelId: Int
}

type RoomBed {
  id: Int
  quantity: Int
  roomModelId: Int
  type: String
}

type RoomCategory {
  id: Int
  name: String
}

type RoomConsultResponse {
  isAvailable: Boolean
  message: String
}

type RoomModel {
  FreeCancellation: Boolean
  album: [Album]
  amenities: [Amenity]
  beds: [RoomBed]
  cancellationFee: Float
  category: String
  description: String
  freeCancellation: Boolean
  hotel: Hotel
  hotelId: Int
  id: Int
  imagesCount: Int
  lowestPrice: Float
  mainImage: String
  maximumGuests: Int
  maximumStay: Int
  miniatures: [Image]
  minimumStay: Int
  mts2: Int
  name: String
  rooms: [Room]
  services: [Service]
  smocking: Boolean
  taxesAndCharges: Float
}

type Service {
  hotelsCount: Int
  id: Int
  name: String
}

type User {
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  role: Role
}

input bedsSpecifications {
  quantity: Int
  type: String
}

input roomSpecifications {
  adults: Int
  children: Int
}

input searchFilter {
  field: String
  value: String
}
