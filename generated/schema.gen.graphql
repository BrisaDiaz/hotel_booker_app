### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  hotelsCount: Int
  id: ID
  name: String
}

type Address {
  administrativeArea: String
  city: String
  country: String
  holeAddress: String
  hotelId: ID!
  id: ID!
  postalCode: String
  street: String
}

type AdminHotels {
  hotels: [Hotel]
  hotelsCount: Int
}

type Administrator {
  hotels: [Hotel]
  id: ID
  user: User
  userId: Int
}

type Album {
  createdAt: String
  hotelId: Int
  id: ID
  images: [Image]
  name: String
  roomModelId: Int
}

type Amenity {
  id: ID
  name: String
}

type AuthPayload {
  token: String
  user: User
}

type BedType {
  id: ID
  name: String
}

type Booking {
  adults: Int
  checkInDate: String
  checkOutDate: String
  children: Int
  client: Client
  clientId: Int
  createdAt: String
  guestsDistribution: [GuestsDistribution]
  hotel: Hotel
  hotelId: Int
  id: ID
  nights: Int
  paymentMethod: PaymentMethod
  reservedRooms: [Room]
  roomModel: RoomModel
  roomModelId: Int
  specifications: String
  status: BookingStatus
  totalCost: Float
}

type BookingRequest {
  adults: Int
  availableRooms: [Room]
  checkInDate: String
  checkOutDate: String
  children: Int
  client: Client
  clientId: Int
  createdAt: String
  email: String
  guestsDistribution: [GuestsDistribution]
  hotelId: Int
  id: ID
  nights: Int
  roomModel: RoomModel
  roomModelId: Int
  specifications: String
  status: BookingRequestStatus
  telephone: String
}

enum BookingRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

enum BookingStatus {
  ACTIVE
  CANCELED
  FINISHED
}

type CancelationDetails {
  bookingId: Int
  cancelationFee: Float
  createdAt: String
  id: ID
  message: String
}

type Client {
  bookings: [Booking]
  email: String
  firstName: String
  id: ID
  landlineNumber: String
  lastName: String
  mobileNumber: String
}

type Facility {
  hotelsCount: Int
  id: ID!
  name: String!
}

type Features {
  accessible: Boolean
  ecoFriendly: Boolean
  familyFriendly: Boolean
  freeCancelation: Boolean
  petFriendly: Boolean
  smokerFriendly: Boolean
}

type GuestSearch {
  guests: [Client]
  totalResults: Int
}

type GuestsDistribution {
  adults: Int
  children: Int
  id: ID
}

type GuestsSearchResult {
  guests: [Client]
}

type Hotel {
  activities: [Activity]
  address: Address
  administratorId: Int!
  adminstrator: Administrator
  albums: [Album]
  brand: String
  category: String
  checkInHour: String
  checkOutHour: String
  description: String
  email: String
  facilities: [Facility]
  features: Features
  frameImage: String
  id: ID!
  interiorImage: String
  languages: [Language]
  lowestPrice: Float
  name: String
  policiesAndRules: String
  public: Boolean
  roomModels: [RoomModel]
  services: [Service]
  taxesAndCharges: Float
  telephone: String
  website: String
}

type HotelCategory {
  hotelsCount: Int
  id: ID
  name: String
}

type HotelData {
  bookings: [Booking]
  bookingsCount: Int
  guests: [[Client]]
  guestsCount: Int
  hotel: Hotel
  requests: [BookingRequest]
  requestsCount: Int
  roomModels: [RoomModel]
  roomModelsCount: Int
}

type HotelSearch {
  hotels: [Hotel]
  pageCount: Int
  totalResults: Int
}

type Image {
  albumId: Int
  id: ID
  src: String
}

type Language {
  hotelsCount: Int
  id: ID
  name: String
}

type Mutation {
  addRoomToModel(hotelId: ID!, roomModelId: ID!, roomNumbers: [Int!]!, userId: ID!): [Room]
  cancelBooking(bookingId: ID!, cancelationFee: Float!, message: String!, userId: ID!): CancelationDetails
  confirmBookingRequest(bookingRequestId: ID!, paymentMethod: String, roomsIds: [Int!]!, totalCost: Float!, userId: ID!): Booking
  creatHotelRoomModel(amenities: [String]!, beds: [bedsSpecifications]!, cancelationFee: Float, category: String!, description: String!, freeCancelation: Boolean!, hotelId: ID!, lowestPrice: Float!, mainImage: String!, maximunGuests: Int!, maximunStay: Int, minimunStay: Int!, mts2: Int!, name: String!, services: [String]!, smooking: Boolean!, taxesAndCharges: Float!, userId: ID!): RoomModel
  createAlbum(hotelId: ID!, images: [String], name: String!, roomModelId: ID, userId: ID!): Album
  createHotel(accessible: Boolean!, activities: [String]!, administrativeArea: String!, brand: String, category: String, checkInHour: String!, checkOutHour: String!, city: String, country: String, description: String!, ecoFriendly: Boolean!, email: String, facilities: [String]!, familyFriendly: Boolean!, frameImage: String!, freeCancelation: Boolean!, holeAddress: String!, interiorImage: String!, languages: [String]!, lowestPrice: Float!, name: String!, petFriendly: Boolean!, policiesAndRules: String!, postalCode: String!, services: [String]!, smokerFriendly: Boolean!, street: String, taxesAndCharges: Float!, telephone: String!, userId: ID!, website: String): Hotel
  declineBookingRequest(bookingRequestId: ID!, userId: ID!): BookingRequest
  deleteAlbum(albumId: ID!, userId: ID!): Album
  deleteRoomOfModel(hotelId: ID!, roomModelId: ID!, roomsIds: [Int!]!, userId: ID!): [Room]
  makeBooking(checkInDate: String!, checkOutDate: String!, email: String!, firstName: String!, guestsDistribution: [roomSpecifications], landlineNumber: String!, lastName: String!, mobileNumber: String!, paymentMethod: String, roomModelId: ID!, roomsIds: [Int!]!, specifications: String, totalCost: Float!, userId: ID!): Booking
  makeBookingRequest(checkInDate: String!, checkOutDate: String!, email: String!, firstName: String!, guestsDistribution: [roomSpecifications]!, landlineNumber: String!, lastName: String!, mobileNumber: String!, roomModelId: ID!, specifications: String): RoomConsultResponceResponce
  signin(email: String!, password: String!): AuthPayload
  signout(date: String): PlainResponse
  signup(email: String!, firstName: String!, lastName: String!, password: String!): User
  updateAlbum(albumId: ID!, images: [String], name: String, userId: ID!): Album
  updateHotel(accessible: Boolean, activities: [String], administrativeArea: String, brand: String, category: String, checkInHour: String, checkOutHour: String, city: String, country: String, description: String, ecoFriendly: Boolean, email: String, facilities: [String], familyFriendly: Boolean, frameImage: String, freeCancelation: Boolean, holeAddress: String, hotelId: ID!, interiorImage: String, languages: [String], lowestPrice: Float, name: String, petFriendly: Boolean, policiesAndRules: String, postalCode: String, services: [String], smokerFriendly: Boolean, street: String, taxesAndCharges: Float, telephone: String, userId: ID!, website: String): Hotel
  updateRoomModel(amenities: [String], beds: [bedsSpecifications], cancelationFee: Float, category: String, description: String, freeCancelation: Boolean, hotelId: ID!, lowestPrice: Float, mainImage: String, maximunGuests: Int, maximunStay: Int, minimunStay: Int, mts2: Int, name: String, roomModelId: ID!, services: [String], smooking: Boolean, taxesAndCharges: Float, userId: ID!): RoomModel
}

type Mutetion {
  updateMyAccount(email: String, firstName: String, lastName: String, password: String): User
}

enum PaymentMethod {
  BILL_TO_ACCOUNT
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRAVELER_CHECK
}

type PlainResponse {
  message: String
}

type Query {
  activitiesList: [Activity]
  adminHotels(userId: ID!): AdminHotels
  albumImages(albumId: ID!): [Image]
  amenitiesList: [Amenity]
  authentication: User
  bedTypesList: [BedType]
  bookingById(bookingId: ID!, userId: ID!): Booking
  checkRoomAvailability(checkInDate: String!, checkOutDate: String!, roomModelId: ID!, rooms: [roomSpecifications]!): RoomConsultResponceResponce
  facilitiesList: [Facility]
  getBookingCancelationDetails(bookingId: ID!): CancelationDetails
  getRoomModelAvailableRooms(checkInDate: String!, checkOutDate: String!, roomModelId: ID!, rooms: [roomSpecifications!]!): [Room]
  hotelAlbums(hotelId: ID!): [Album]
  hotelBookings(from: String, hotelId: ID!, status: String, until: String, userId: ID!): [Booking]
  hotelById(hotelId: ID!): Hotel
  hotelCategoriesList: [HotelCategory]
  hotelData(hotelId: ID!, userId: ID!): HotelData
  hotelGuests(hotelId: ID!, search: searchFilter, skip: Int = 0, sort: String, take: Int = 6, userId: ID!): GuestSearch
  hotelRequests(hotelId: ID!, search: searchFilter, skip: Int = 0, sort: String, take: Int = 8, userId: ID!): RequestSearch
  hotelRoomModels(hotelId: ID!, userId: ID!): [RoomModel]
  hotelSearch(activities: [String], categories: [String], facilities: [String], features: [String], languages: [String], search: String, services: [String], skip: Int, sort: String, take: Int): HotelSearch
  languagesList: [Language]
  roomCategoriesList: [RoomCategory]
  roomModelAlbum(roomModelId: ID!): Album
  roomModelById(roomModelId: ID!): RoomModel
  roomModelData(roomModelId: ID!, userId: ID!): RoomModelData
  servicesList: [Service]
}

type RequestSearch {
  pageCount: Int
  requests: [BookingRequest]
  totalResults: Int
}

enum Role {
  ADMIN
  USER
}

type Room {
  bookings: [Booking]
  id: ID
  number: Int
  roomModel: RoomModel
  roomModelId: Int
}

type RoomBed {
  id: ID
  quantity: Int
  roomModelId: Int
  type: String
}

type RoomCategory {
  id: ID
  name: String
}

type RoomConsultResponceResponce {
  isAvailable: Boolean
  message: String
}

type RoomModel {
  album: [Album]
  amenities: [Amenity]
  beds: [RoomBed]
  cancelationFee: Float
  canselationFree: Boolean
  category: String
  description: String
  freeCancelation: Boolean
  hotel: Hotel
  hotelId: Int
  id: ID
  lowestPrice: Float
  mainImage: String
  maximunGuests: Int
  maximunStay: Int
  minimunStay: Int
  mts2: Int
  name: String
  rooms: [Room]
  services: [Service]
  smooking: Boolean
  taxesAndCharges: Float
}

type RoomModelData {
  bookings: [Booking]
  bookingsCount: Int
  guests: [Client]
  guestsCount: Int
  rooms: Room
  roomsCount: Int
}

type Service {
  hotelsCount: Int
  id: ID
  name: String
}

type User {
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  role: Role
}

input bedsSpecifications {
  quantity: Int
  type: String
}

input roomSpecifications {
  adults: Int
  children: Int
}

input searchFilter {
  field: String
  value: String
}
