### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  id: ID
  name: String
}

type Address {
  administrativeArea: String
  city: String
  country: String
  holeAddress: String
  hotelId: ID!
  id: ID!
  postalCode: String
  street: String
}

type AdminHotels {
  hotels: [Hotel]
  hotelsCount: Int
}

type Administrator {
  hotels: [Hotel]
  id: ID
  user: User
  userId: Int
}

type Amenity {
  id: ID
  name: String
}

type AuthPayload {
  token: String
  user: User
}

type BedType {
  id: ID
  name: String
}

type Booking {
  adults: Int
  checkInDate: Int
  checkOutDate: Int
  children: Int
  client: Client
  clientId: Int
  guestsDistribution: [GuestsDistribution]
  hotel: Hotel
  hotelId: Int
  id: ID
  paymentMethod: PaymentMethod
  room: Room
  roomId: Int
  roomModel: RoomModel
  roomModelId: Int
  rooms: Room
  specifications: String
  status: BookingStatus
  totalCost: Float
}

type BookingRequest {
  adults: Int
  checkInDate: String
  checkOutDate: String
  children: Int
  client: Client
  clientId: Int
  email: String
  guestsDistribution: [GuestsDistribution]
  hotelId: Int
  id: ID
  roomModel: RoomModel
  roomModelId: Int
  specifications: String
  status: BookingRequestStatus
  telephone: String
}

enum BookingRequestStatus {
  DECLINED
  PENDING
}

enum BookingStatus {
  ACTIVE
  CANCELED
  FINISH
}

type Client {
  bookings: [Booking]
  email: String
  firstName: String
  id: ID
  landlineNumber: String
  lastName: String
  mobileNumber: String
}

type Facility {
  id: ID!
  name: String!
}

type Features {
  accessible: Boolean
  ecoFriendly: Boolean
  familyFriendly: Boolean
  freeCancelation: Boolean
  petFriendly: Boolean
  smokerFriendly: Boolean
}

type GuestsDistribution {
  adults: Int
  children: Int
  id: ID
}

type Hotel {
  activities: [Activity]
  address: Address
  administratorId: Int
  adminstrator: Administrator
  brand: String
  category: String
  checkInHour: String
  checkOutHour: String
  description: String
  email: String
  facilities: [Facility]
  features: Features
  frameImage: String
  id: ID!
  images: [Image]
  interiorImage: String
  languages: [Language]
  lowestPrice: Float
  name: String
  policiesAndRules: String
  public: Boolean
  roomModels: [RoomModel]
  services: [Service]
  taxesAndCharges: Float
  telephone: String
  website: String
}

type HotelCategory {
  id: ID
  name: String
}

type HotelData {
  bookings: [Booking]
  bookingsCount: Int
  guests: [Client]
  guestsCount: Int
  hotel: Hotel
  requests: [BookingRequest]
  requestsCount: Int
  roomModels: [RoomModel]
  roomModelsCount: Int
}

type HotelSearch {
  hotels: [Hotel]
  pageCount: Int
  totalResults: Int
}

type Image {
  hotelId: Int
  id: ID
  roomId: Int
  src: String
  title: String
}

type Language {
  id: ID
  name: String
}

type Mutation {
  addNewClient(email: String!, firstName: String!, hotelId: ID!, landlineNumber: String!, lastName: String!, mobileNumber: String!, userId: ID!): Client
  addRoomToModel(hotelId: ID!, roomModelId: ID!, roomNumbers: [Int!]!, userId: ID!): [Room]
  creatHotelRoomModel(amenities: [String]!, beds: [bedsSpecifications]!, category: String!, description: String!, freeCancelation: Boolean!, hotelId: ID!, lowestPrice: Float!, mainImage: String!, maximunGuests: Int!, maximunStay: Int, minimunStay: Int!, mts2: Int!, name: String!, services: [String]!, smooking: Boolean!, taxesAndCharges: Float!, userId: ID!): RoomModel
  createHotel(accessible: Boolean!, activities: [String]!, administrativeArea: String!, brand: String, category: String, checkInHour: String!, checkOutHour: String!, city: String, country: String, description: String!, ecoFriendly: Boolean!, email: String, facilities: [String]!, familyFriendly: Boolean!, frameImage: String!, freeCancelation: Boolean!, holeAddress: String!, interiorImage: String!, languages: [String]!, lowestPrice: Float!, name: String!, petFriendly: Boolean!, policiesAndRules: String!, postalCode: String!, services: [String]!, smokerFriendly: Boolean!, street: String, taxesAndCharges: Float!, telephone: String!, userId: ID!, website: String): Hotel
  deleteRoomOfModel(hotelId: ID!, roomModelId: ID!, roomsIds: [Int!]!, userId: ID!): [Room]
  editRoomModelVicibility(hotelId: Int!, public: Boolean!, roomModelId: ID!, userId: ID!): RoomModel
  makeBooking(adults: Int!, checkInDate: String!, checkOutDate: String!, children: Int!, clientId: ID!, guestsDistribution: [roomSpecifications], hotelId: ID!, nights: Int!, paymentMethod: String, rooModelId: ID!, roomId: ID!, rooms: Int!, totalCost: Float!, userId: ID!): Booking
  makeBookingRequest(checkInDate: String!, checkOutDate: String!, email: String!, firstName: String!, guestsDistribution: [roomSpecifications]!, landlineNumber: String!, lastName: String!, mobileNumber: String!, roomModelId: ID!, specifications: String): RoomConsultResponceResponce
  signin(email: String!, password: String!): AuthPayload
  signout(date: String): PlainResponse
  signup(email: String!, firstName: String!, lastName: String!, password: String!): User
  updateHotelAddress(administrativeArea: String, city: String, country: String, holeAddress: String, hotelId: ID!, postalCode: String, street: String, userId: ID!): Address
  updateHotelLowestPrice(hotelId: ID!, lowestPrice: Float!, userId: ID!): Hotel
  updateRoomModelPrice(hotelId: ID!, lowestPrice: Float, taxesAndCharges: Float, userId: ID!): RoomModel
}

type Mutetion {
  updateMyAccount(email: String, firstName: String, lastName: String, password: String): User
}

enum PaymentMethod {
  BILL_TO_ACCOUNT
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRAVELER_CHECK
}

type PlainResponse {
  message: String
}

type Query {
  activitiesList: [Activity]
  adminHotels(userId: ID!): AdminHotels
  amenitiesList: [Amenity]
  authentication: User
  bedTypesList: [BedType]
  bookingById(bookingId: ID!, userId: ID!): Booking
  checkRoomAvailability(checkInDate: String!, checkOutDate: String!, roomModelId: ID!, rooms: [roomSpecifications]!): RoomConsultResponceResponce
  facilitiesList: [Facility]
  hotelBookingsById(hotelId: ID!, userId: ID!): [Booking]
  hotelById(hotelId: ID!): Hotel
  hotelCategoriesList: [HotelCategory]
  hotelData(hotelId: ID!, userId: ID!): HotelData
  hotelGuestsById(hotelId: ID!, userId: ID!): [Booking]
  hotelRequestsById(hotelId: ID!, userId: ID!): [BookingRequest]
  hotelSearch(activities: [String], categories: [String], facilities: [String], features: [String], languages: [String], search: String, services: [String], skip: Int, sort: String, take: Int): HotelSearch
  languagesList: [Language]
  roomCategoriesList: [RoomCategory]
  roomModelById(roomModelId: ID!): RoomModel
  roomModelData(roomModelId: ID!, userId: ID!): RoomModelData
  servicesList: [Service]
}

enum Role {
  ADMIN
  USER
}

type Room {
  bookings: [Booking]
  id: ID
  number: Int
  roomModel: RoomModel
  roomModelId: Int
}

type RoomBed {
  id: ID
  quantity: Int
  roomModelId: Int
  type: String
}

type RoomCategory {
  id: ID
  name: String
}

type RoomConsultResponceResponce {
  isAvailable: Boolean
  message: String
}

type RoomModel {
  amenities: [Amenity]
  beds: [RoomBed]
  canselationFree: Boolean
  category: String
  description: String
  freeCancelation: Boolean
  hotel: Hotel
  hotelId: Int
  id: ID
  images: [Image]
  lowestPrice: Float
  mainImage: String
  maximunGuests: Int
  maximunStay: Int
  minimunStay: Int
  mts2: Int
  name: String
  rooms: [Room]
  services: [Service]
  smooking: Boolean
  taxesAndCharges: Float
}

type RoomModelData {
  bookings: [Booking]
  bookingsCount: Int
  guests: [Client]
  guestsCount: Int
  rooms: Room
  roomsCount: Int
}

type Service {
  id: ID
  name: String
}

type User {
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  role: Role
}

input bedsSpecifications {
  quantity: Int
  type: String
}

input roomSpecifications {
  adults: Int
  children: Int
}
