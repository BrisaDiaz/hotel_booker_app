### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Activity {
  id: ID
  name: String
}

type Address {
  administrativeArea: String
  city: String
  country: String
  holeAddress: String
  hotelId: ID!
  id: ID!
  postalCode: String
  street: String
}

type Administrator {
  hotels: [Hotel]
  id: ID
  user: User
  userId: Int
}

type Amenity {
  id: ID
  name: String
}

type AuthPayload {
  token: String
  user: User
}

type Booking {
  adults: Int
  checkInDate: Int
  checkOutDate: Int
  childrens: Int
  client: Client
  clientId: Int
  hotel: Hotel
  hotelId: Int
  id: ID
  paymentMethod: PaymentMethod
  room: Room
  roomId: Int
  roomModel: RoomModel
  roomModelId: Int
  rooms: Int
  specifications: String
  status: BookingStatus
}

enum BookingStatus {
  ACTIVE
  CANCELED
  REJECTED
}

type Client {
  bookings: [Booking]
  cellularNumber: String
  email: String
  firstName: String
  homePhoneNumber: String
  id: ID
  lastName: String
}

type Facility {
  id: ID!
  name: String!
}

type Features {
  accesible: Boolean
  cancelationFree: Boolean
  ecoFriendly: Boolean
  familyFriendly: Boolean
  petFriendly: Boolean
  smokerFriendly: Boolean
}

type Hotel {
  activities: [Activity]
  address: Address
  administratorId: Int
  adminstrator: Administrator
  brand: String
  category: String
  checkInHour: String
  checkOutHour: String
  description: String
  email: String
  facilities: [Facility]
  frameImage: String
  id: ID!
  images: [Image]
  interiorImage: String
  languages: [Language]
  lowestPrice: Float
  name: String
  policiesAndRules: String
  public: Boolean
  roomModels: [RoomModel]
  services: [Service]
  telephone: String
}

type HotelCategory {
  id: ID
  name: String
}

type Image {
  hotelId: Int
  id: ID
  roomId: Int
  src: String
  title: String
}

type Language {
  id: ID
  name: String
}

type Mutation {
  addHotelAddress(administrativeArea: String!, city: String, country: String!, holeAddress: String!, hotelId: ID!, postalCode: String!, street: String): Address
  addHotelFeatures(accesible: Boolean!, cancelationFree: Boolean!, ecoFriendly: Boolean!, familyFriendly: Boolean!, hotelId: ID!, petFriendly: Boolean!, smokerFriendly: Boolean!): Features
  addRoomToHotel(hotelId: ID!, number: Int!, roomModelId: Int!): Room
  checkRoomAvailability(checkInDate: String, checkOutDate: String, roomModelId: String, rooms: [roomSpecifications]): RoomConsultResponse
  creatHotelRoomModel(amenities: [String]!, category: String!, description: String!, hotelId: Int!, lowestPrice: Int!, mainImage: String!, maximunGuests: Int!, maximunStay: Int!, minimunStay: Int!, mts2: Int!, quantityInHotel: Int!, services: [String]!): RoomModel
  createHotel(InteriorImage: String!, activities: [String]!, brand: String, category: String, checkInHour: String!, checkOutHour: String!, description: String!, email: String, facilities: [String]!, frameImage: String!, languages: [String]!, lowestPrice: Float!, name: String!, policiesAndRules: String!, services: [String]!, telephone: String!): Hotel
  createNewClient(cellularNumber: String!, email: String!, firstName: String!, homePhoneNumber: String!, lastName: String!): Client
  editRoomModelVicibility(hotelId: Int!, id: ID!, public: Boolean!): RoomModel
  makeBooking(adults: Int!, checkInDate: String!, checkOutDate: String!, childrens: Int!, clientId: ID!, hotelId: ID!, nights: Int!, paymentMethod: String, rooModelId: ID!, roomId: ID!, rooms: Int!): Booking
  signin(email: String!, password: String!): AuthPayload
  signup(email: String!, firstName: String!, lastName: String!, password: String!): User
  updateHotelLowestPrice(hotelId: ID!, lowestPrice: Float!): Hotel
  updateRoomModelPrice(hotelId: Int!, id: ID!, lowestPrice: Float!): RoomModel
}

type Mutetion {
  updateMyAccount(email: String, firstName: String, password: String, secondName: String): User
}

enum PaymentMethod {
  BILL_TO_ACCOUNT
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRAVELER_CHECK
}

type Query {
  activitiesList: [Activity]
  amenitiesList: [Amenity]
  facilitiesList: [Facility]
  getBookingById(id: ID!): Booking
  getHotelById(id: ID!): Hotel
  getMessages: [TestArray]
  getMoreMessages: [TestArray]
  hotelCategoriesList: [HotelCategory]
  hotels: [Hotel]
  languagesList: [Language]
  me: User
  roomModelById(id: ID!): RoomModel
  servicesList: [Service]
}

enum Role {
  ADMIN
  USER
}

type Room {
  bookings: [Booking]
  id: ID
  roomModel: RoomModel
  roomModelId: Int
}

type RoomBed {
  quantity: Int
  roomId: Int
  type: String
}

type RoomConsultResponse {
  isAvailable: Boolean
  message: String
}

type RoomModel {
  amenities: [Amenity]
  beds: [RoomBed]
  canselationFree: Boolean
  category: String
  description: String
  hotelId: Int
  id: ID
  images: [Image]
  lowestPrice: Float
  mainImage: String
  maximunGuests: Int
  maximunStay: Int
  minimunStay: Int
  mts2: Int
  rooms: [[Room]]
  services: [Service]
}

type Service {
  id: ID
  name: String
}

type TestArray {
  id: ID
  message: String
}

type User {
  email: String
  id: ID
  lastname: String
  name: String
  password: String
  role: Role
}

input roomSpecifications {
  adults: Int
  childrens: Int
}
